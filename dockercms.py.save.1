from flask import Flask, Response, render_template, request
import json
from subprocess import Popen, PIPE
import osfrom tempfile import mkdtemp
from werkzeug import secure_filename

app = Flask(__name__)

@app.route("/")
def index():
    return """
Available API endpoints:\n
GET /containers                     List all containers\n
GET /containers?state=running      List running containers (only)\n
GET /containers/<id>                Inspect a specific container\n
GET /containers/<id>/logs           Dump specific container logs\n
GET /images                         List all images\n
POST /images                        Create a new image\n
POST /containers                    Create a new container\n
PATCH /containers/<id>              Change a container's state\n
PATCH /images/<id>                  Change a specific image's attributes\n
DELETE /containers/<id>             Delete a specific container\n
DELETE /containers                  Delete all containers (including running)\n
DELETE /images/<id>                 Delete a specific image\n
DELETE /images                      Delete all images\n
"""

@app.route('/containers')
def containers_index():

    if request.method=='GET':
        """
        List all containers

        curl -s -X GET -H 'Accept: application/json' http://localhost:8080/containers | python -mjson.tool
        curl -s -X GET -H 'Accept: application/json' http://localhost:8080/containers?state=running | python -mjson.tool
        """
        if request.form.get('listrunning') == 'running': 
            output = docker('ps')
            resp = json.dumps(docker_ps_to_array(output))

        elif request.form.get('listall') == 'all':
            output = docker('ps', '-a')
            resp = json.dumps(docker_ps_to_array(output))

        #resp = ''
        return Response(response=resp, mimetype="application/json")

    return'''
    <!doctype html>
    <title>Containers index</title>
    <h1>List Containers</h1>
    <form action="/containers" method=get>
      <input type="submit" name="Listrunning" value="running">
      <input type="submit" name="Listall" value="all">
    </form>
    '''

@app.route('/images', methods=['GET'])
def images_index():
    """
    List all images 
    
    curl -s -X GET -H 'Accept: application/json' http://localhost:8080/images | python -mjson.tool 
    """
    output = docker('images')
    resp = json.dumps(docker_images_to_array(output))
    
    #resp = ''
    return Response(response=resp, mimetype="application/json")

@app.route('/containers/<id>', methods=['GET'])
def containers_show(id):
    """
    Inspect specific container

    curl -s -X GET -H 'Accept: application/json' http://localhost:8080/containers/<id> | python -mjson.tool
    """

    output = docker('ps','-f','id='+id)
    resp = json.dumps(docker_ps_to_array(output))

    return Response(response=resp, mimetype="application/json")

@app.route('/containers/<id>/logs', methods=['GET'])
def containers_log(id):
    """
    Dump specific container logs
    curl -s -X GET -H 'Accept: application/json' http://localhost:8080/containers/<id>/logs | python -mjson.tool
    """

    output = docker('logs',id)
    resp = json.dumps(docker_logs_to_object(id,output))

    return Response(response=resp, mimetype="application/json")

@app.route('/services',methods=['GET'])
def services_index():
    """
    List all services

    curl -s -X GET -H 'Accept: application/json' http://localhost:8080/services | python -mjson.tool
    """

    output = docker('service','ls')
    resp = json.dumps(docker_services_to_array(output))

    return Response(response=resp, mimetype = "application/json")

@app.route('/nodes',methods=['GET'])
def nodes_index():
    """
    List all nodes

    curl -s -X GET -H 'Accept: application/json' http://localhost:8080/nodes | python -mjson.tool
    """

    output = docker('node','ls')
    resp = json.dumps(docker_nodes_to_array(output))

    return Response(response=resp,mimetype = "application/json")

@app.route('/images/<id>', methods=['DELETE'])
def images_remove(id):
    """
    Delete a specific image
    """
    docker ('rmi', id)
    resp = '{"id": "%s"}' % id
    return Response(response=resp, mimetype="application/json")

@app.route('/containers/<id>', methods=['DELETE'])
def containers_remove(id):
    """
    Delete a specific container - must be already stopped/killed
    """
    resp = ''
    return Response(response=resp, mimetype="application/json")

@app.route('/containers', methods=['DELETE'])
def containers_remove_all():
    """
    Force remove all containers - dangrous!
    """
    resp = ''
    return Response(response=resp, mimetype="application/json")

@app.route('/images', methods=['DELETE'])
def images_remove_all():
    """
    Force remove all images - dangrous!
    """
 
    resp = ''
    return Response(response=resp, mimetype="application/json")


@app.route('/containers', methods=['POST'])
def containers_create():
    """
    Create container (from existing image using id or name)
    curl -X POST -H 'Content-Type: application/json' http://localhost:8080/containers -d '{"image": "my-app"}'
    curl -X POST -H 'Content-Type: application/json' http://localhost:8080/containers -d '{"image": "b14752a6590e"}'
    curl -X POST -H 'Content-Type: application/json' http://localhost:8080/containers -d '{"image": "b14752a6590e","publish":"8081:22"}'
    """
    body = request.get_json(force=True)
    image = body['image']
    args = ('run', '-d')
    id = docker(*(args + (image,)))[0:12]
    return Response(response='{"id": "%s"}' % id, mimetype="application/json")


@app.route('/images', methods=['POST'])
def images_create():
    """
    Create image (from uploaded Dockerfile)
    curl -H 'Accept: application/json' -F file=@Dockerfile http://localhost:8080/images
    """
    dockerfile = request.files['file']
    
    resp = ''
    return Response(response=resp, mimetype="application/json")




@app.route('/containers/<id>', methods=['PATCH'])
def containers_update(id):
    """
    Update container attributes (support: state=running|stopped)
    curl -X PATCH -H 'Content-Type: application/json' http://localhost:8080/containers/b6cd8ea512c8 -d '{"state": "running"}'
    curl -X PATCH -H 'Content-Type: application/json' http://localhost:8080/containers/b6cd8ea512c8 -d '{"state": "stopped"}'
    """
    body = request.get_json(force=True)
    try:
        state = body['state']
        if state == 'running':
            docker('restart', id)
    except:
        pass

    resp = '{"id": "%s"}' % id
    return Response(response=resp, mimetype="application/json")

@app.route('/images/<id>', methods=['PATCH'])
def images_update(id):
    """
    Update image attributes (support: name[:tag])  tag name should be lowercase only
    curl -s -X PATCH -H 'Content-Type: application/json' http://localhost:8080/images/7f2619ed1768 -d '{"tag": "test:1.0"}'
    """
    resp = ''
    return Response(response=resp, mimetype="application/json")


def docker(*args):
    cmd = ['sudo','docker']
    for sub in args:
        cmd.append(sub)
    process = Popen(cmd, stdout=PIPE, stderr=PIPE)
    stdout, stderr = process.communicate()
    if stderr.startswith(b'Error'):
        print('Error: {0} -> {1}'.format(' '.join(cmd), stderr))
    return stderr + stdout

# 
# Docker output parsing helpers
#

#
# Parses the output of a Docker PS command to a python List
# 
def docker_ps_to_array(output):
    all = []
    for c in [line.split() for line in output.splitlines()[1:]]:
        each = {}
        each['id'] = c[0].decode('utf-8')
        each['image'] = c[1].decode('utf-8')
        each['name'] = c[-1].decode('utf-8')
        each['ports'] = c[-2].decode('utf-8')
        all.append(each)
    return all

#
# Parses the output of a Docker logs command to a python Dictionary
# (Key Value Pair object)
def docker_logs_to_object(id, output):
    logs = {}
    logs['id'] = id
    all = []
    for line in output.splitlines():
        all.append(line.decode('utf-8'))
    logs['logs'] = all
    return logs

#
# Parses the output of a Docker image command to a python List
# 
def docker_images_to_array(output):
    all = []
    for c in [line.split() for line in output.splitlines()[1:]]:
        each = {}
        each['id'] = c[2].decode('utf-8')
        each['tag'] = c[1].decode('utf-8')
        each['name'] = c[0].decode('utf-8')
        all.append(each)
    return all

#
# Parses output of Docker service command to a python list
#
def docker_services_to_array(output):
    all = []
    for c in [line.split() for line in output.splitlines()[1:]]:
        each = {}
        each['id'] = c[0].decode('utf-8')
        each['name'] = c[1].decode('utf-8')
        each['mode'] = c[2].decode('utf-8')
        each['image'] = c[4].decode('utf-8')
        each['ports'] = c[5].decode('utf-8')
        all.append(each)
    return all
#
# Parses output of Docker node command to a python list
#
def docker_nodes_to_array(output):
    all = []
    for c in [line.split() for line in output.splitlines()[1:]]:
        each = {}
        each['id'] = c[0].decode('utf-8')
        each['hostname'] = c[1].decode('utf-8')
        each['status'] = c[2].decode('utf-8')
        each['availability'] = c[3].decode('utf-8')
        all.append(each)
    return all

if __name__ == "__main__":
    app.run(host="0.0.0.0",port=5000, debug=True)
